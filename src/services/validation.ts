import { isValid, parse, differenceInYears } from "date-fns";
import { OnboardingData } from "../contexts/OnboardingContext";

interface ValidationError {
  field: string;
  message: string;
}

export function validateUserData(data: OnboardingData): ValidationError[] {
  console.log("üîç Iniciando valida√ß√£o dos dados:", data);
  const errors: ValidationError[] = [];

  // Validar campos obrigat√≥rios
  if (
    !data.gender ||
    !data.birthDate ||
    !data.height ||
    !data.weight ||
    !data.goal
  ) {
    errors.push({
      field: "required",
      message: "Todos os campos obrigat√≥rios devem ser preenchidos",
    });
  }

  // Validar combina√ß√µes l√≥gicas
  if (data.goal !== "maintain" && (!data.weightGoal || !data.weightSpeed)) {
    errors.push({
      field: "goal",
      message: "Meta e velocidade s√£o obrigat√≥rios para perda/ganho de peso",
    });
  }

  // Valida√ß√£o de g√™nero
  if (!data.gender) {
    errors.push({
      field: "gender",
      message: "G√™nero √© obrigat√≥rio",
    });
  }

  // Valida√ß√£o de data de nascimento
  if (data.birthDate) {
    const age = differenceInYears(new Date(), data.birthDate);

    if (age < 13) {
      errors.push({
        field: "birthDate",
        message: "Voc√™ precisa ter pelo menos 13 anos para usar o app",
      });
    }

    if (age > 100) {
      errors.push({
        field: "birthDate",
        message: "Data de nascimento inv√°lida",
      });
    }

    // Validar data imposs√≠vel
    if (!isValid(data.birthDate)) {
      errors.push({
        field: "birthDate",
        message: "Data inv√°lida",
      });
    }
  }

  // Valida√ß√£o de altura
  if (data.height) {
    if (data.height < 100) {
      errors.push({
        field: "height",
        message: "Altura m√≠nima √© 100cm",
      });
    }
    if (data.height > 250) {
      errors.push({
        field: "height",
        message: "Altura m√°xima √© 250cm",
      });
    }
  }

  // Valida√ß√£o de peso
  if (data.weight) {
    if (data.weight < 30) {
      errors.push({
        field: "weight",
        message: "Peso m√≠nimo √© 30kg",
      });
    }
    if (data.weight > 300) {
      errors.push({
        field: "weight",
        message: "Peso m√°ximo √© 300kg",
      });
    }
  }

  // Valida√ß√£o de velocidade de perda/ganho
  if (data.weightSpeed && data.goal !== "maintain") {
    if (data.weightSpeed < 0.1) {
      errors.push({
        field: "weightSpeed",
        message: "Velocidade m√≠nima √© 0.1kg por semana",
      });
    }
    if (data.weightSpeed > 1.5) {
      errors.push({
        field: "weightSpeed",
        message: "Velocidade m√°xima √© 1.5kg por semana",
      });
    }
  }

  // Valida√ß√£o de frequ√™ncia de treino
  if (
    data.trainingFrequency &&
    !["sedentary", "light", "moderate", "heavy", "athlete"].includes(
      data.trainingFrequency
    )
  ) {
    errors.push({
      field: "trainingFrequency",
      message: "Frequ√™ncia de treino inv√°lida",
    });
  }

  if (errors.length > 0) {
    console.warn("‚ö†Ô∏è Erros encontrados na valida√ß√£o:", errors);
  } else {
    console.log("‚úÖ Dados v√°lidos!");
  }

  return errors;
}

function calculateAge(birthDate: Date): number {
  const today = new Date();
  let age = today.getFullYear() - birthDate.getFullYear();
  const m = today.getMonth() - birthDate.getMonth();
  if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
    age--;
  }
  return age;
}
